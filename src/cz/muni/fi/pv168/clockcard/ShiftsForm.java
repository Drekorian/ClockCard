package cz.muni.fi.pv168.clockcard;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

/**
 * For for viewing shifts.
 *
 * @author Marek Osvald
 * @version 2011.0629
 */
public class ShiftsForm extends javax.swing.JFrame {

    /** Creates new form ShiftsForm */
    public ShiftsForm() {
        initComponents();
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Translation"); // NOI18N
        setTitle(bundle.getString("ShiftsForm.title")); // NOI18N

        jTable1.setModel(new ShiftTableModel());
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText(bundle.getString("ShiftsForm.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideShiftForm(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hideShiftForm(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideShiftForm
        this.dispose();
    }//GEN-LAST:event_hideShiftForm

    public JTable getjTable1() {
        return jTable1;
    }

    class ShiftTableModel extends AbstractTableModel {

        List<Shift> shifts = new ArrayList<Shift>();

        private ShiftTableModel() {
            super();
        }

        public void addShifts(List<Shift> shift) {
            for(Shift sh: shift){
                shifts.add(sh);
            }
            fireTableStructureChanged();
            fireTableDataChanged();
        }

        public int getRowCount() {
            return shifts.size();
        }

        @Override
        public String getColumnName(int columnIndex) {
            ResourceBundle translationResource = ResourceBundle.getBundle("Translation", Locale.getDefault());
            switch (columnIndex) {
                case 0:
                    return translationResource.getString("ShiftFormTable.worker");
                case 1:
                    return translationResource.getString("ShiftFormTable.start");
                case 2:
                    return translationResource.getString("ShiftFormTable.end");
                case 3:
                    return translationResource.getString("ShiftFormTable.nettoTime");
                case 4:
                    return translationResource.getString("ShiftFormTable.totalBreakTime");
                default:
                    throw new IllegalArgumentException("columnIndex");
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return String.class;
                case 1:
                    return String.class;
                case 2:
                    return String.class;
                case 3:
                    return String.class;
                case 4:
                    return String.class;
                default:
                    throw new IllegalArgumentException("columnIndex");
            }
        }

        public int getColumnCount() {
            return 5;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            Shift shift = shifts.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return WorkerForm.getLogedWorker().getSurname();
                case 1:
                    return new SimpleDateFormat("HH:mm:ss dd/MM/yyyy").format(shift.getStart().getTime());
                case 2:
                    return new SimpleDateFormat("HH:mm:ss dd/MM/yyyy").format(shift.getEnd().getTime());
                case 3:
                    return String.valueOf((shift.getEnd().getTimeInMillis() - shift.getStart().getTimeInMillis() - shift.getTotalBreakTime()) / 1000 / 60)+"min";
                case 4:
                    return String.valueOf(shift.getTotalBreakTime() / 1000 / 60)+"min";
                default:
                    throw new IllegalArgumentException("columnIndex");
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
