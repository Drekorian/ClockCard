package cz.muni.fi.pv168.clockcard;

import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import org.apache.commons.dbcp.*;
import org.apache.commons.pool.impl.GenericObjectPool;

/**
 * Connection manager class.
 * TODO: Documentation? Is this ours or 3rd party code?
 *
 * @author David Stein
 * @version 2011.0518
 */

public class ConnectionManager {
    public static DataSource ds = null;
    

    private static Connection connection = null;
    private static GenericObjectPool _pool = null;

    public ConnectionManager(DBConfiguration config) {
        this.connectToDb(config);
    }

    public static Connection getConnection() throws SQLException {
        System.out.println("Chci spojeni :");
        if (ConnectionManager.connection == null) {
            System.out.println("Vytvarim spojeni");
            ConnectionManager cm = new ConnectionManager(new DBConfiguration(false));
            try {
                ConnectionManager.connection = ConnectionManager.ds.getConnection();
            } catch (SQLException ex) {
                //TODO: Resolve legacy code
                Logger.getLogger(ConnectionManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("Spojeni existuje"+connection);
        return ConnectionManager.connection;
    }

    @Override
    protected void finalize() {
        try {
            super.finalize();
        } catch (Throwable ex) {
            //TODO: Check logging in this case. (Seems like legacy autogenerated code.)
            Logger.getLogger(ConnectionManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void connectToDb(DBConfiguration config) {
        try {
            java.lang.Class.forName(config.getDriverName()).newInstance();
        } catch (Exception ex) {
            Logger.getLogger(ConnectionManager.class.getName()).log(Level.SEVERE, null, ex);
        }

        ConnectionManager.ds = this.setupDataSource(
            config.getDbUrl(),
            config.getUser(),
            config.getPassword(),
            config.getDbPoolMinSize(),
            config.getDbPoolMaxSize());
    }

    private DataSource setupDataSource(String dbUrl, String user, String password, int dbPoolMinSize, int dbPoolMaxSize) {

        GenericObjectPool connectionPool = new GenericObjectPool(null);
        connectionPool.setMinIdle( dbPoolMinSize );
        connectionPool.setMaxActive( dbPoolMaxSize );

        ConnectionManager._pool = connectionPool;

        ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(dbUrl,user, password);

        PoolableConnectionFactory poolableConnectionFactory =
                new PoolableConnectionFactory(connectionFactory, connectionPool, null, null, false, true);

        PoolingDataSource dataSource = new PoolingDataSource(connectionPool);

        return dataSource;
    }
}
